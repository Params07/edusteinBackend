{"version":3,"file":"static/js/343.0709181e.chunk.js","mappings":"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","sources":["AdminComponents/Components/DynamicTable.js","AdminComponents/Components/EditPromoCode.js","AdminComponents/Components/ModalForm.js","AdminComponents/Hooks/Get.js","AdminComponents/Hooks/UsePost.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst DynamicTable = ({ data, component, action }) => {\r\n  if (!data || data.length === 0) {\r\n    return <p>No data available</p>;\r\n  }\r\n\r\n  const columns = Object.keys(data[0]);\r\n  const allColumns = ['Action', ...columns];\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto m-4\">\r\n      <div className=\"overflow-y-auto h-[500px] no-scrollbar\">\r\n        <table className=\"min-w-full border border-collapse \">\r\n          <thead className=\"bg-gray-300 border-b w-full sticky top-0 z-5 h-16\">\r\n            <tr>\r\n              {allColumns.map((column) => (\r\n                <th className=\"py-2 px-4 border-b border-gray-300 text-center bg-gray-200\" key={column}>\r\n                  {column === 'Action' ? action : column}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((row, rowIndex) => (\r\n              <tr className=\"py-2 px-4 border-b   border-gray-300 text-center\" key={rowIndex}>\r\n                {allColumns.map((column) => {\r\n                  if (column === 'Action') {\r\n                    return (\r\n                      <td className=\"py-2 px-4 border-gray-300 border-b text-center\" key={column}>\r\n                        {component(row)}\r\n                      </td>\r\n                    );\r\n                  } else {\r\n                    return (\r\n                      <td className=\"py-2 px-4 border-gray-300 border-b text-center\" key={column}>\r\n                        {row[column]}\r\n                      </td>\r\n                    );\r\n                  }\r\n                })}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicTable;\r\n","import React, { useMemo, useState } from 'react'\r\nimport useGet from '../Hooks/Get';\r\nimport DynamicTable from './DynamicTable';\r\nimport usePost from '../Hooks/UsePost';\r\nimport ModalForm from './ModalForm';\r\nimport { showPopup } from '../../Components/Notification';\r\nconst EditPromoCode = () => {\r\n    const [toggleModal,setToggleModal] = useState(false);\r\n    const [promocodeID ,setPromocodeID] = useState(0);\r\n    const url = `/promocode/getPromoCodes`\r\n    const { data:promoCodeDatas = [], fetchData } = useGet(url); \r\n    const {post,error} = usePost('/promocode/alterPromocode');\r\n    let message = `Do you want to change state of  the promocode`\r\n    const updatePromocode = async()=>{\r\n        \r\n      try{\r\n        if(promocodeID > 0){\r\n            const result = await post({ promocodeID });\r\n        showPopup({success:true,message:\"updated\"})\r\n        fetchData();\r\n        }\r\n        \r\n        \r\n     }catch(err){\r\n        console.error(err);\r\n        showPopup({success:false,message:error})\r\n     }finally{\r\n        setToggleModal(false);\r\n     }\r\n    }\r\n    const renderbutton = (row)=>{\r\n        console.log(row.is_active.props.name);\r\n        return (\r\n            <button onClick={()=>{setToggleModal(true);setPromocodeID(row.id)}}\r\n            className={`text-white px-8 py-1 rounded text-sm ${row.is_active.props.name == 'Active'?'bg-red-400':'bg-green-400 '}`} >{row.is_active.props.name == 'Active' ?'close':'set-active'}</button>\r\n        )\r\n    }\r\n    const processedPromoData = useMemo(() => {\r\n        return promoCodeDatas.map((promoCodeData) => ({\r\n            ...promoCodeData,\r\n            expiration_date:new Date(promoCodeData.expiration_date).toISOString().slice(0,10),\r\n            is_active: (\r\n                <span name={promoCodeData.is_active ? 'Active' : 'Closed'}\r\n                    className={`px-2 py-1 text-white rounded ${\r\n                        promoCodeData.is_active ? 'bg-green-500' : 'bg-red-500'\r\n                    }`}\r\n                >\r\n                    {promoCodeData.is_active ? 'Active' : 'Closed'}\r\n                </span>\r\n            )\r\n        }));\r\n    }, [promoCodeDatas]);\r\n    const closeModal = ()=> setToggleModal(false);\r\n\r\n  return (\r\n    <>\r\n    <div>\r\n        <DynamicTable\r\n          data={processedPromoData} \r\n          component={renderbutton}\r\n          action={'Action'}\r\n        />\r\n    </div>\r\n    {toggleModal ? <ModalForm message={message} yesAction={updatePromocode} noAction={closeModal}/>:''}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditPromoCode","import React from 'react'\r\n\r\nconst ModalForm = ({message,yesAction,noAction}) => {\r\n  return (\r\n    <div className=\"fixed  inset-0 bg-gray-800 bg-opacity-75 flex justify-center items-center  \">\r\n          <div className=\"bg-white w-max p-4 rounded-lg h-36 grid gap-6 \">\r\n             <p className='font-semibold text-lg px-4'>{message}</p>\r\n             <p className='w-full flex space-x-4'>\r\n                <button className='w-full py-2 bg-red-500 border-2 border-red-500 hover:bg-red-400 text-white rounded-md' onClick={()=>yesAction()}>Yes</button>\r\n                <button className='w-full py-2 bg-gray-300  rounded-md border-2 border-gray-300 hover:bg-gray-200 ' onClick={()=>{noAction()}}>No</button>\r\n             </p>\r\n        </div>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default ModalForm","import { useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useGet = (url) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchData = useCallback(async (params = {}) => {\r\n\r\n    if (!url) return;\r\n   \r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await axios.get(url, {\r\n        params,\r\n        withCredentials: true,\r\n      });\r\n      setData(response.data);\r\n    } catch (err) {\r\n      setError(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [url]);\r\n\r\n  useEffect(() => {\r\n    if(url){\r\n      fetchData();\r\n    }\r\n   \r\n   \r\n  }, [fetchData]); \r\n\r\n  return { fetchData, data, loading, error };\r\n};\r\n\r\nexport default useGet;\r\n","import { useState,useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst usePost = (url) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const post = async (data) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const isFormData = data instanceof FormData;\r\n      \r\n      const response = await axios.post(url, data, {\r\n        withCredentials: true, \r\n        headers: isFormData ? {\r\n          'Content-Type': 'multipart/form-data',\r\n        } : {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      setLoading(false);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err);\r\n      setLoading(false);\r\n      throw err;\r\n    }\r\n  };\r\n  \r\n\r\n  return { post, loading, error };\r\n};\r\n\r\nexport default usePost;\r\n"],"names":["_ref","data","component","action","length","_jsx","children","allColumns","Object","keys","className","_jsxs","map","column","row","rowIndex","EditPromoCode","toggleModal","setToggleModal","useState","promocodeID","setPromocodeID","promoCodeDatas","fetchData","useGet","post","error","usePost","processedPromoData","useMemo","promoCodeData","expiration_date","Date","toISOString","slice","is_active","name","_Fragment","DynamicTable","console","log","props","onClick","id","ModalForm","message","yesAction","async","showPopup","success","err","noAction","closeModal","url","loading","setLoading","setData","setError","useCallback","params","arguments","undefined","response","axios","get","withCredentials","useEffect","isFormData","FormData","headers"],"sourceRoot":""}